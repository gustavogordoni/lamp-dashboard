/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.dockermenager.view;

import br.com.dockermenager.ctr.ServicoCTR;
import br.com.dockermenager.dao.EnvConfig;
import java.awt.Desktop;
import java.io.File;
import java.net.URI;
import javax.swing.*;

/**
 *
 * @author gustavo
 */
public class PainelPrincipal extends javax.swing.JFrame {

    private ServicoCTR controller = new ServicoCTR();
    private String dockerComposeFilePath;

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(PainelPrincipal.class.getName());

    /**
     * Creates new form PainelPrincipal
     */
    public PainelPrincipal() {
        setTitle("Painel de Containers");
        initComponents();

        dockerComposeFilePath = controller.carregarCaminho();
        if (dockerComposeFilePath != null) {
            atualizarStatusContainers();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        iniciarMySQL = new javax.swing.JButton();
        pararMySQL = new javax.swing.JButton();
        labelMysql = new javax.swing.JLabel();
        iniciarPhpMyAdmin = new javax.swing.JButton();
        pararPhpMyAdmin = new javax.swing.JButton();
        labelPhpMyAdmin = new javax.swing.JLabel();
        btnLinkPhpMyAdmin = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        iniciarPgAdmin = new javax.swing.JButton();
        pararPgAdmin = new javax.swing.JButton();
        labelPgAdmin = new javax.swing.JLabel();
        iniciarPostgres = new javax.swing.JButton();
        pararPostgres = new javax.swing.JButton();
        labelPostgres = new javax.swing.JLabel();
        btnLinkPgAdmin = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        iniciarPHP = new javax.swing.JButton();
        pararPHP = new javax.swing.JButton();
        labelMysql3 = new javax.swing.JLabel();
        btnLinkPHP = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnDockerFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        iniciarMySQL.setBackground(new java.awt.Color(102, 255, 102));
        iniciarMySQL.setForeground(new java.awt.Color(0, 0, 0));
        iniciarMySQL.setText("Iniciar");
        iniciarMySQL.setEnabled(false);
        iniciarMySQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarMySQLActionPerformed(evt);
            }
        });

        pararMySQL.setBackground(new java.awt.Color(255, 102, 102));
        pararMySQL.setForeground(new java.awt.Color(0, 0, 0));
        pararMySQL.setText("Parar");
        pararMySQL.setEnabled(false);
        pararMySQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pararMySQLActionPerformed(evt);
            }
        });

        labelMysql.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMysql.setText("MySQL");

        iniciarPhpMyAdmin.setBackground(new java.awt.Color(102, 255, 102));
        iniciarPhpMyAdmin.setForeground(new java.awt.Color(0, 0, 0));
        iniciarPhpMyAdmin.setText("Iniciar");
        iniciarPhpMyAdmin.setEnabled(false);
        iniciarPhpMyAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarPhpMyAdminActionPerformed(evt);
            }
        });

        pararPhpMyAdmin.setBackground(new java.awt.Color(255, 102, 102));
        pararPhpMyAdmin.setForeground(new java.awt.Color(0, 0, 0));
        pararPhpMyAdmin.setText("Parar");
        pararPhpMyAdmin.setEnabled(false);
        pararPhpMyAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pararPhpMyAdminActionPerformed(evt);
            }
        });

        labelPhpMyAdmin.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPhpMyAdmin.setText("PhpMyAdmin");

        btnLinkPhpMyAdmin.setBackground(new java.awt.Color(102, 102, 255));
        btnLinkPhpMyAdmin.setForeground(new java.awt.Color(0, 0, 0));
        btnLinkPhpMyAdmin.setText("Ir");
        btnLinkPhpMyAdmin.setEnabled(false);
        btnLinkPhpMyAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLinkPhpMyAdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iniciarMySQL)
                    .addComponent(iniciarPhpMyAdmin))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(pararPhpMyAdmin)
                        .addGap(18, 18, 18)
                        .addComponent(labelPhpMyAdmin))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(pararMySQL)
                        .addGap(18, 18, 18)
                        .addComponent(labelMysql, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLinkPhpMyAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iniciarMySQL)
                    .addComponent(pararMySQL)
                    .addComponent(labelMysql))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iniciarPhpMyAdmin)
                    .addComponent(pararPhpMyAdmin)
                    .addComponent(labelPhpMyAdmin)
                    .addComponent(btnLinkPhpMyAdmin))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        iniciarPgAdmin.setBackground(new java.awt.Color(102, 255, 102));
        iniciarPgAdmin.setForeground(new java.awt.Color(0, 0, 0));
        iniciarPgAdmin.setText("Iniciar");
        iniciarPgAdmin.setEnabled(false);
        iniciarPgAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarPgAdminActionPerformed(evt);
            }
        });

        pararPgAdmin.setBackground(new java.awt.Color(255, 102, 102));
        pararPgAdmin.setForeground(new java.awt.Color(0, 0, 0));
        pararPgAdmin.setText("Parar");
        pararPgAdmin.setEnabled(false);
        pararPgAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pararPgAdminActionPerformed(evt);
            }
        });

        labelPgAdmin.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPgAdmin.setText("PgAdmin");

        iniciarPostgres.setBackground(new java.awt.Color(102, 255, 102));
        iniciarPostgres.setForeground(new java.awt.Color(0, 0, 0));
        iniciarPostgres.setText("Iniciar");
        iniciarPostgres.setEnabled(false);
        iniciarPostgres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarPostgresActionPerformed(evt);
            }
        });

        pararPostgres.setBackground(new java.awt.Color(255, 102, 102));
        pararPostgres.setForeground(new java.awt.Color(0, 0, 0));
        pararPostgres.setText("Parar");
        pararPostgres.setEnabled(false);
        pararPostgres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pararPostgresActionPerformed(evt);
            }
        });

        labelPostgres.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPostgres.setText("Postgres");

        btnLinkPgAdmin.setBackground(new java.awt.Color(102, 102, 255));
        btnLinkPgAdmin.setForeground(new java.awt.Color(0, 0, 0));
        btnLinkPgAdmin.setText("Ir");
        btnLinkPgAdmin.setEnabled(false);
        btnLinkPgAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLinkPgAdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(iniciarPostgres)
                        .addGap(18, 18, 18)
                        .addComponent(pararPostgres)
                        .addGap(18, 18, 18)
                        .addComponent(labelPostgres, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(iniciarPgAdmin)
                        .addGap(18, 18, 18)
                        .addComponent(pararPgAdmin)
                        .addGap(18, 18, 18)
                        .addComponent(labelPgAdmin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLinkPgAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pararPostgres)
                    .addComponent(iniciarPostgres)
                    .addComponent(labelPostgres))
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pararPgAdmin)
                        .addComponent(labelPgAdmin)
                        .addComponent(btnLinkPgAdmin))
                    .addComponent(iniciarPgAdmin))
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        iniciarPHP.setBackground(new java.awt.Color(102, 255, 102));
        iniciarPHP.setForeground(new java.awt.Color(0, 0, 0));
        iniciarPHP.setText("Iniciar");
        iniciarPHP.setEnabled(false);
        iniciarPHP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarPHPActionPerformed(evt);
            }
        });

        pararPHP.setBackground(new java.awt.Color(255, 102, 102));
        pararPHP.setForeground(new java.awt.Color(0, 0, 0));
        pararPHP.setText("Parar");
        pararPHP.setEnabled(false);
        pararPHP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pararPHPActionPerformed(evt);
            }
        });

        labelMysql3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMysql3.setText("PHP");

        btnLinkPHP.setBackground(new java.awt.Color(102, 102, 255));
        btnLinkPHP.setForeground(new java.awt.Color(0, 0, 0));
        btnLinkPHP.setText("Ir");
        btnLinkPHP.setEnabled(false);
        btnLinkPHP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLinkPHPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iniciarPHP)
                .addGap(18, 18, 18)
                .addComponent(pararPHP)
                .addGap(18, 18, 18)
                .addComponent(labelMysql3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLinkPHP, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iniciarPHP)
                    .addComponent(pararPHP)
                    .addComponent(labelMysql3)
                    .addComponent(btnLinkPHP))
                .addContainerGap())
        );

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("docker-compose.yaml");

        btnDockerFile.setText("Local do arquivo");
        btnDockerFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDockerFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnDockerFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDockerFile)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarMySQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarMySQLActionPerformed
        if (controller.iniciar(getDockerComposeFile(), "mysql")) {           
            try {
                Thread.sleep(5000);
                controller.verificarAplicarRoot();
                JOptionPane.showMessageDialog(this, "MySQL iniciado!");
            } catch (InterruptedException ex) {
                System.getLogger(PainelPrincipal.class.getName())
                        .log(System.Logger.Level.ERROR, "Erro ao aguardar inicialização do MySQL", ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Falha ao iniciar MySQL!");
        }

        atualizarStatusContainers();
    }//GEN-LAST:event_iniciarMySQLActionPerformed

    private void pararMySQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pararMySQLActionPerformed
        if (controller.parar(getDockerComposeFile(), "mysql")) {
            JOptionPane.showMessageDialog(this, "MySQL parado!");
        } else {
            JOptionPane.showMessageDialog(this, "Falha ao parar MySQL!");
        }
        atualizarStatusContainers();
    }//GEN-LAST:event_pararMySQLActionPerformed

    private void iniciarPostgresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarPostgresActionPerformed
        if (controller.iniciar(getDockerComposeFile(), "postgres")) {
            JOptionPane.showMessageDialog(this, "Postgres iniciado!");
        } else {
            JOptionPane.showMessageDialog(this, "Falha ao iniciar Postgres!");
        }

        atualizarStatusContainers();
    }//GEN-LAST:event_iniciarPostgresActionPerformed

    private void pararPostgresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pararPostgresActionPerformed
        if (controller.parar(getDockerComposeFile(), "postgres")) {
            JOptionPane.showMessageDialog(this, "Postgres parado!");
        } else {
            JOptionPane.showMessageDialog(this, "Falha ao parar Postgres!");
        }

        atualizarStatusContainers();
    }//GEN-LAST:event_pararPostgresActionPerformed

    private void iniciarPhpMyAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarPhpMyAdminActionPerformed
        if (controller.iniciar(getDockerComposeFile(), "phpmyadmin")) {           
            
            try {
                Thread.sleep(5000);
                controller.verificarAplicarRoot();
                JOptionPane.showMessageDialog(this, "phpMyAdmin iniciado!");
            } catch (InterruptedException ex) {
                System.getLogger(PainelPrincipal.class.getName())
                        .log(System.Logger.Level.ERROR, "Erro ao aguardar inicialização do MySQL", ex);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Falha ao iniciar phpMyAdmin!");
        }

        atualizarStatusContainers();
    }//GEN-LAST:event_iniciarPhpMyAdminActionPerformed

    private void pararPhpMyAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pararPhpMyAdminActionPerformed
        if (controller.parar(getDockerComposeFile(), "phpmyadmin")) {
            JOptionPane.showMessageDialog(this, "phpMyAdmin parado!");
        } else {
            JOptionPane.showMessageDialog(this, "Falha ao parar phpMyAdmin!");
        }

        atualizarStatusContainers();
    }//GEN-LAST:event_pararPhpMyAdminActionPerformed

    private void iniciarPgAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarPgAdminActionPerformed
        if (controller.iniciar(getDockerComposeFile(), "pgadmin")) {
            JOptionPane.showMessageDialog(this, "pgAdmin iniciado!");
        } else {
            JOptionPane.showMessageDialog(this, "Falha ao iniciar pgAdmin!");
        }

        atualizarStatusContainers();
    }//GEN-LAST:event_iniciarPgAdminActionPerformed

    private void pararPgAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pararPgAdminActionPerformed
        if (controller.parar(getDockerComposeFile(), "pgadmin")) {
            JOptionPane.showMessageDialog(this, "pgAdmin parado!");
        } else {
            JOptionPane.showMessageDialog(this, "Falha ao parar pgAdmin!");
        }

        atualizarStatusContainers();
    }//GEN-LAST:event_pararPgAdminActionPerformed

    private void btnDockerFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDockerFileActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Selecione o docker-compose.yaml");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int retorno = chooser.showOpenDialog(this);

        if (retorno == JFileChooser.APPROVE_OPTION) {
            File dockerComposeFile = chooser.getSelectedFile();

            if (isDockerComposeFile(dockerComposeFile)) {
                dockerComposeFilePath = dockerComposeFile.getAbsolutePath();
                JOptionPane.showMessageDialog(this, "Arquivo válido selecionado: \n" + dockerComposeFilePath);

                controller.init(dockerComposeFilePath);
                
                atualizarStatusContainers();

                dockerComposeFilePath = dockerComposeFile.getAbsolutePath();
                controller.salvarCaminho(dockerComposeFilePath);

            } else {
                JOptionPane.showMessageDialog(this, "Selecione um arquivo docker-compose.yaml válido!");
                dockerComposeFilePath = null;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Nenhum arquivo selecionado. \nUsando padrão ./docker-compose.yaml");
            atualizarStatusContainers();
            dockerComposeFilePath = "./docker-compose.yaml";
        }
    }//GEN-LAST:event_btnDockerFileActionPerformed

    private void iniciarPHPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarPHPActionPerformed
        if (controller.iniciar(getDockerComposeFile(), "php")) {
            JOptionPane.showMessageDialog(this, "PHP iniciado!");
        } else {
            JOptionPane.showMessageDialog(this, "Falha ao iniciar PHP!");
        }

        atualizarStatusContainers();
    }//GEN-LAST:event_iniciarPHPActionPerformed

    private void pararPHPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pararPHPActionPerformed
        if (controller.parar(getDockerComposeFile(), "php")) {
            JOptionPane.showMessageDialog(this, "PHP parado!");
        } else {
            JOptionPane.showMessageDialog(this, "Falha ao parar PHP!");
        }

        atualizarStatusContainers();
    }//GEN-LAST:event_pararPHPActionPerformed

    private void btnLinkPHPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLinkPHPActionPerformed
        controller.init(dockerComposeFilePath);
        openWebpage("http://localhost:" + controller.getEnv("PHP_PORT", "80"));
    }//GEN-LAST:event_btnLinkPHPActionPerformed

    private void btnLinkPgAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLinkPgAdminActionPerformed
        controller.init(dockerComposeFilePath);
        openWebpage("http://localhost:" + controller.getEnv("PGADMIN_PORT", "8081"));
    }//GEN-LAST:event_btnLinkPgAdminActionPerformed

    private void btnLinkPhpMyAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLinkPhpMyAdminActionPerformed
        controller.init(dockerComposeFilePath);
        openWebpage("http://localhost:" + controller.getEnv("PMA_PORT", "8080"));
    }//GEN-LAST:event_btnLinkPhpMyAdminActionPerformed

    private String getDockerComposeFile() {
        if (dockerComposeFilePath == null || dockerComposeFilePath.isBlank()) {
            return "./docker-compose.yaml";
        }
        return dockerComposeFilePath;
    }

    private void openWebpage(String urlString) {
        try {
            Desktop.getDesktop().browse(new URI(urlString));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Não foi possível abrir a URL: " + e.getMessage());
        }
    }

    private void atualizarStatusContainers() {
        boolean phpRodando = controller.isRunning(controller.getEnv("PHP_CONTAINER_NAME", "birazn-ifsp-php"));
        iniciarPHP.setEnabled(!phpRodando);
        pararPHP.setEnabled(phpRodando);
        btnLinkPHP.setEnabled(phpRodando);

        boolean mysqlRodando = controller.isRunning(controller.getEnv("MYSQL_CONTAINER_NAME", "birazn-ifsp-mysql"));
        iniciarMySQL.setEnabled(!mysqlRodando);
        pararMySQL.setEnabled(mysqlRodando);

        boolean postgresRodando = controller.isRunning(controller.getEnv("POSTGRES_CONTAINER_NAME", "birazn-ifsp-pgsql"));
        iniciarPostgres.setEnabled(!postgresRodando);
        pararPostgres.setEnabled(postgresRodando);

        boolean phpmyadminRodando = controller.isRunning(controller.getEnv("PMA_CONTAINER_NAME", "birazn-ifsp-phpmyadmin"));
        iniciarPhpMyAdmin.setEnabled(!phpmyadminRodando);
        pararPhpMyAdmin.setEnabled(phpmyadminRodando);
        btnLinkPhpMyAdmin.setEnabled(phpmyadminRodando);

        boolean pgadminRodando = controller.isRunning(controller.getEnv("PGADMIN_CONTAINER_NAME", "birazn-ifsp-pgadmin"));
        iniciarPgAdmin.setEnabled(!pgadminRodando);
        pararPgAdmin.setEnabled(pgadminRodando);
        btnLinkPgAdmin.setEnabled(pgadminRodando);
    }

    private boolean isDockerComposeFile(File file) {
        String nome = file.getName().toLowerCase();
        return nome.endsWith(".yml") || nome.endsWith(".yaml");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        // SwingUtilities.invokeLater(() -> new PainelPrincipal().setVisible(true));
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new PainelPrincipal().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDockerFile;
    private javax.swing.JButton btnLinkPHP;
    private javax.swing.JButton btnLinkPgAdmin;
    private javax.swing.JButton btnLinkPhpMyAdmin;
    private javax.swing.JButton iniciarMySQL;
    private javax.swing.JButton iniciarPHP;
    private javax.swing.JButton iniciarPgAdmin;
    private javax.swing.JButton iniciarPhpMyAdmin;
    private javax.swing.JButton iniciarPostgres;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel labelMysql;
    private javax.swing.JLabel labelMysql3;
    private javax.swing.JLabel labelPgAdmin;
    private javax.swing.JLabel labelPhpMyAdmin;
    private javax.swing.JLabel labelPostgres;
    private javax.swing.JButton pararMySQL;
    private javax.swing.JButton pararPHP;
    private javax.swing.JButton pararPgAdmin;
    private javax.swing.JButton pararPhpMyAdmin;
    private javax.swing.JButton pararPostgres;
    // End of variables declaration//GEN-END:variables
}
